Session 31
ES6 Classes and inheritance

console.log("this is Tutorial31.js");

class Employee {
  constructor(givenName, givenExperience, givenDivision) {
    this.name = givenName;
    this.experience = givenExperience;
    this.division = givenDivision;
  }

  slogan() {
    return `I am ${this.name} and this company is the best`;
  }

  joiningYear() {
    return 2020 - this.experience;
  }

  static add(a, b) {
    return a + b;
  }
}

class Programmer extends Employee {
  constructor(givenName, givenExperience, givenDivision, language, github) {
    super(givenName, givenExperience, givenDivision);
    this.language = language;
    this.github = github;
  }

  favoriteLanguage() {
    if (this.language == "python") {
      return "Python";
    } else {
      return "JavaScript";
    }
  }

  static multiply(a, b) {
    return a * b;
  }
}

// harry = new Employee("Harry", 56, "Division");
// console.log(harry.joiningYear());
// console.log(Employee.add(34, 5))
rohan = new Programmer("Rohan", 3, "Lays", "Go", "Rohan420");
console.log(rohan);
console.log(rohan.favoriteLanguage());
console.log(Programmer.multiply(5, 7));


//====================================================================================================
//====================================================================================================

Session 32
console.log("This is tutorial 32");
// create a class library and implement the following:
// constructor must take the book list as an argument
// getBookList()
// issueBook(bookname, user)
// returnBook(bookname)

//====================================================================================================
//====================================================================================================

Session 34
What is asynchronos programming?

console.log("This is tutorial 34");

setTimeout(() => {
  for (let index = 0; index < 105; index++) {
    const element = index;
    console.log("This is index number" + index);
  }
}, 100);

console.log("done printing");




//====================================================================================================
//====================================================================================================

session 35
AJAX

AJAX stands for asynchronos JavaScript and XML

AJAX is not programming language.Rather, it's a set of existing technologies.

AJAX helps in fetching data asynchronously without interfering with existing page.

No page reload/refresh

Modern websites use JSON instead or XML for data transfer


Advantages
1)No page reload/refresh
2)Saves Network bandwith
3)Better user experiance
4)Very Interactive


How it works?
1)AJAX uses XMLHttpRequest object(also called xhr object) to achieve this

2)Modern websites use JSON instead or XML for data transfer.

3)Data can be transferrd in any format and protocol (Not always https necessarily)

//====================================================================================================
//====================================================================================================

Session 36

console.log("This is tutorial 36 -sol tut 32");

// create a class library and implement the following:
// constructor must take the book list as an argument
// getBookList()
// issueBook(bookname, user)
// returnBook(bookname)

class Library {
  constructor(bookList) {
    this.bookList = bookList;
    this.issuedBooks = {};
  }

  getBookList() {
    this.bookList.forEach((element) => {
      console.log(element);
    });
  }

  issueBook(bookname, user) {
    if (this.issuedBooks[bookname] == undefined) {
      this.issuedBooks[bookname] = user;
    } else {
      console.log("This book is already issued!");
    }
  }

  returnBook(bookname) {
    delete this.issuedBooks[bookname];
  }
}

// //testing
// lib = new Library("abcd", "efgh", "ijkh");
// lib.getBookList();
// lib.issueBook("abcd", "lokesh");
// lib.issueBook("abcd", "lokesh");
// lib.returnBook('abcd');


//====================================================================================================
//====================================================================================================
Session 37

console.log("This is tutorial 37");

//callback function
// Pretend that this response is coming from the server
const students = [
  { name: "harry", subject: "JavaScript" },
  { name: "Rohan", subject: "Machine Learning" },
];

function enrollStudent(student, callback) {
  setTimeout(function () {
    students.push(student);
    console.log("Student has been enrolled");
    callback();
  }, 1000);
}

function getStudents() {
  setTimeout(function () {
    let str = "";
    students.forEach(function (student) {
      str += `<li> ${student.name}</li>`;
    });
    document.getElementById("students").innerHTML = str;
    console.log("Students have been fetched");
  }, 5000);
}

let newStudent = { name: "Sunny", subject: "Python" };
enrollStudent(newStudent, getStudents);
// getStudents();
//====================================================================================================
//====================================================================================================