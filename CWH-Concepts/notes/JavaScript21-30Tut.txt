Session 23

Math Object
console.log("We are in tutorial 23");

let x = 3;
let y = 6;
let z;
z = x + y;
z = x - y;
z = x * y;
z = x / y;

// Exploring the Math object
z = Math;
z = Math.PI;
z = Math.E;
z = Math.round(5.4); //5
z = Math.ceil(5.3); //6
z = Math.floor(-5.3); //-6
z = Math.abs(-5); //5
z = Math.sqrt(64); //8
z = Math.pow(2, 3); //8
z = Math.min(2, 3, 34, 234, 2342, 34); //2
z = Math.max(2, 3, 34, 234, 34); //234
z = Math.random();
z = 100 * Math.random();
z = Math.ceil(50 + (100 - 50) * Math.random());
// a = (0, 1)
// a100 = a*100 = (0, 100)
// a10_100 = 10+a*(100 - 10)

console.log(z);



//====================================================================================================
//====================================================================================================
Session 24
Date Object

console.log("Welcome to tutorial 24");

let today = new Date();
// console.log(typeof today);
let otherDate = new Date("8-4-2003 04:54:08");
// otherDate = new Date('June 13 1976');
// otherDate = new Date('09/16/1976');
console.log(otherDate);
let a;
a = otherDate.getDay();
a = otherDate.getDate();
a = otherDate.getMinutes();
// a = otherDate.getSeconds();
// a = otherDate.getHours();
a = otherDate.getTime();
a = otherDate.getMilliseconds();
a = otherDate.getMonth();
console.log(a);
otherDate.setDate(23);
otherDate.setMonth(0);
otherDate.setFullYear(1900);
otherDate.setMinutes(2);
otherDate.setHours(1);
otherDate.setSeconds(3);
console.log(otherDate);



//====================================================================================================
//====================================================================================================
Session 25

console.log("This is tutorial 25 Exercise 2 Solution");

/*
You have to create a div and inject it into the page which contains a heading

whenever someone clicks on the div,it should be converted into an editable item.
whenever user clicks away (blur) .
save the note into localstorage.

*/
//create a new element
let divElem = document.createElement("div");

//Add text to that created element
let val = localStorage.getItem("text");
let text;
if (val == null) {
  text = document.createTextNode("This is my element click to edit it");
} else {
  text = document.createTextNode(val);
}

//give element id,style and class
divElem.setAttribute("id", "elem");
divElem.setAttribute("class", "elem");
divElem.setAttribute(
  "style",
  "border:2px solid black; width:154px; margin:34px; padding:23px"
);

//grab the main container
let container = document.querySelector(".container");
let first = document.getElementById("myfirst");

//insert the element before element with id first
container.insertBefore(divElem, first);
divElem.appendChild(text);
console.log(divElem, container, first);

//add event listener to the divElem
divElem.addEventListener("click", function () {
  let noTextAreas = document.getElementsByClassName("textarea").length;
  if (noTextAreas == 0) {
    let html = elem.innerHTML;
    divElem.innerHTML = `<textarea class="textarea form-control"  id="textarea" rows='3'>${html}</textarea>`;
  }

  //listen for the blue event
  let textarea = document.getElementById("textarea");
  textarea.addEventListener("blur", function () {
    elem.innerHTML = textarea.value;
    localStorage.setItem("text", textarea.value);
  });
});



//====================================================================================================
//====================================================================================================

Session 27
Object Literals Constrctors

console.log("This is tut 27");

// Object Literal for creating objects
let car = {
  name: "Maruti 800",
  topSpeed: 89,
  run: function () {
    console.log("car is running");
  },
};
// we have already seen constructors like these:
// new Date();

// Creating a constructor for cars
function GeneralCar(givenName, givenSpeed) {
  this.name = givenName;
  this.topSpeed = givenSpeed;
  this.run = function () {
    console.log(`${this.name} Is Running`);
  };
  this.analyze = function () {
    console.log(
      `This car is slower by ${200 - this.topSpeed} Km/H than Mercedes`
    );
  };
}
car1 = new GeneralCar("Nissan", 180);
car2 = new GeneralCar("Marutu Alto", 80);
car3 = new GeneralCar("Mercedes", 200);
console.log(car1, car2, car3);



//====================================================================================================
//====================================================================================================
Session 28

Object prototype

console.log("This is tutorial 28");

// Object literal : Object.prototype
let obj = {
    name: "harry",
    channel: "Code With Harry",
    address: "Mars"
}

function Obj(givenName){
    this.name = givenName
}

Obj.prototype.getName = function (){
    return this.name;
}

Obj.prototype.setName = function (newName){
  this.name = newName;
}

let obj2 = new Obj("Rohan Das");
console.log(obj2);
 

//====================================================================================================
//====================================================================================================

Session 30
Prototype inheritence

console.log("This is tutorial 30");

const proto = {
  slogan: function () {
    return `This company is the best`;
  },
  changeName: function (newName) {
    this.name = newName;
  },
};

// This creates harry object
let harry = Object.create(proto);
harry.name = "harry";
harry.role = "Programmer";
// harry.changeName("Harry2")
// console.log(harry)

// This also creates harry object
const harry1 = Object.create(proto, {
  name: { value: "harry", writable: true },
  role: { value: "Programmer" },
});
harry1.changeName("Harry2");
// console.log(harry1)

// Employee constructor
function Employee(name, salary, experience) {
  this.name = name;
  this.salary = salary;
  this.experience = experience;
}

// Slogan
Employee.prototype.slogan = function () {
  return `This company is the best. Regards, ${this.name}`;
};

// Create an object from this constructor now
let harryObj = new Employee("Harry", 345099, 87);
console.log(harryObj.slogan());

// Programmer
function Programmer(name, salary, experience, language) {
  Employee.call(this, name, salary, experience);
  this.language = language;
}

// Inherit the prototype
Programmer.prototype = Object.create(Employee.prototype);

// Manually set the constructor
Programmer.prototype.constructor = Programmer;

let rohan = new Programmer("Rohan", 2, 0, "Javascript");
console.log(rohan);



//====================================================================================================
//====================================================================================================

